vim $( grep -r require * | cut -f1 -d: )

# find an path
set path=~/<pathhere>/**
:find DTD.m
add an autocommand to update find

# set vim to a filetype
set ft=xml


   # vim momvements
0  # takes you to the beginning of the line
$  # takes you to the end of the line
w  # jump workds
W  # jump works based on spaces
e  # jump to the end of the word
E  # jump to the end of the word based on spaces
b  # go back a word beginning of word
B  # go back a word based on spaces, beginning of word
ge # bo back word end of word
gE # go back word end of word, beginning of word

        # jump via searching char
f<char> # first character found on line
F<char> # first character found on line going backwards
t<char> # 'til character before first character found on line.
T<char> # 'til character before first character found on line going backwards.
;       # repeat the f, F, t, T searh command - i mapped this to :

     # jump via paging
c-f  # forware full page
c-b  # backward full page
c-U  # up half page
c-D  # down half page
H    # jump to the head of the page
M    # jump to the middle of the page
L    # jump to the end of the page without scrolling
gg   # go to the top of the file
G    # go to the bottom of the file

   # jump via searching pt2, word based
/<word>  # search on the chadr
?<word>  # seacrh bachwards
*  # search on the word under the cursor
g* # search without the word boundaries
n  # go forward during search
N  # go backward durig search
'# #search backwards

             # jump via brackets
], [, ][, [] # go forward, backward to next bracket
%            # go to matching bracket

      # setting and jumping to marks
ma    # mark a line
makrs # show all makrs
'a    # go to a mark on the beginning of the column
`a    # go to mark on exact column
''    # go to the last place you were

              # working with windows
c-w o         # keep 'only' one window
c-w x         # switch between 2 different windows
:split, :sp   # split the vim horizontally
c-w v         # vertical split
:vsp, :vsplit # vertical split
c-w c         # close a window
c-w H, c-w J, # move a window left(H), up(J), down(K), right(L)
c-w K, c-w L
c-w p         # goes to the previous window


# insert modes
I # insert mode at the beginng of the line
A # insert at the end of the line
o # insert line after the cursoer
O # insert line before the cursor
C # change to the end of the line
r # replace 2 character
R # replace


# yank paste etc.
yy # yank
Y # yank linke
p # paste after cursor
P # paste before cursor

# visual mode
v # enter linewise block mode
V # enter visual line mode
c-v # enter into visula block mode
gv # repeat the last visual block

# vim completions
# insert mode
c-x c-l # full line completion
c-n   # compluetion based on next usage
c-p   # completion based on previous useage
c-x c-f   # path completion inside vim
c-x c-f   # path completion inside vim

#global substitue
:%s/^\(\s*\).TEXT="\([^"]*\)".*$/\1/

# delete non matching
:v/<text>/d or :g!/<text>/d

# command history
q: # open the commdn history
q/ # search the command history
q? # alternative q/

    # macros
qa  # start recording a macro
q   # end the macro
@a  # repeat the macro
c-a # not sure what this does...seems to be able to increment 20c-a

# to check later
# bufdo
# argslist can apply chagnes to a list of files
#

"""""""""""""""""""""""""""""""
" Nerd Commenter key bindings "
"""""""""""""""""""""""""""""""
"Comment out the current line or text selected in visual mode.
[count]<leader>cc |NERDComComment|

"Same as <leader>cc but forces nesting.
[count]<leader>cn |NERDComNestedComment|

"Toggles the comment state of the selected line(s). If the topmost selected line is commented, all selected lines are uncommented and vice versa.
[count]<leader>c |NERDComToggleComment|

"Comments the given lines using only one set of multipart delimiters.
[count]<leader>cm |NERDComMinimalComment|

"Toggles the comment state of the selected line(s) individually.
[count]<leader>ci |NERDComInvertComment|

"Comments out the selected lines ``sexily''
[count]<leader>cs |NERDComSexyComment|

"Same as <leader>cc except that the commented line(s) are yanked first.
[count]<leader>cy |NERDComYankComment|

"Comments the current line from the cursor to the end of line.
<leader>c$ |NERDComEOLComment|

"Adds comment delimiters to the end of line and goes into insert mode between them.
<leader>cA |NERDComAppendComment|

"Adds comment delimiters at the current cursor position and inserts between. Disabled by default.
"|NERDComInsertComment|

""Switches to the alternative set of delimiters.
<leader>ca |NERDComAltDelim|

""Same as |NERDComComment| except that the delimiters are aligned down the left side (<leader>cl) or both sides (<leader>cb).
[count]<leader>cl
[count]<leader>cb |NERDComAlignedComment|

""Uncomments the selected line(s).
[count]<leader>cu |NERDComUncommentLine|


